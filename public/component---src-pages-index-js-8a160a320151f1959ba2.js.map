{"version":3,"file":"component---src-pages-index-js-8a160a320151f1959ba2.js","mappings":"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","sources":["webpack://my-gatsby-site/./node_modules/@chakra-ui/layout/dist/chunk-MPFPK3CX.mjs","webpack://my-gatsby-site/./node_modules/@chakra-ui/button/dist/chunk-DGWZA2DU.mjs","webpack://my-gatsby-site/./node_modules/@chakra-ui/button/dist/chunk-HCASMTTF.mjs","webpack://my-gatsby-site/./node_modules/@chakra-ui/button/dist/chunk-HNNHG6RU.mjs","webpack://my-gatsby-site/./node_modules/@chakra-ui/react-use-merge-refs/dist/index.mjs","webpack://my-gatsby-site/./node_modules/@chakra-ui/button/dist/chunk-NAA7TEES.mjs","webpack://my-gatsby-site/./node_modules/@chakra-ui/button/dist/chunk-FRFD4OXU.mjs","webpack://my-gatsby-site/./src/pages/index.js"],"sourcesContent":["// src/flex.tsx\nimport {\n  chakra,\n  forwardRef\n} from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Flex = forwardRef(function Flex2(props, ref) {\n  const { direction, align, justify, wrap, basis, grow, shrink, ...rest } = props;\n  const styles = {\n    display: \"flex\",\n    flexDirection: direction,\n    alignItems: align,\n    justifyContent: justify,\n    flexWrap: wrap,\n    flexBasis: basis,\n    flexGrow: grow,\n    flexShrink: shrink\n  };\n  return /* @__PURE__ */ jsx(chakra.div, { ref, __css: styles, ...rest });\n});\nFlex.displayName = \"Flex\";\n\nexport {\n  Flex\n};\n","// src/button-context.ts\nimport { createContext } from \"@chakra-ui/react-context\";\nvar [ButtonGroupProvider, useButtonGroup] = createContext({\n  strict: false,\n  name: \"ButtonGroupContext\"\n});\n\nexport {\n  ButtonGroupProvider,\n  useButtonGroup\n};\n","// src/button-icon.tsx\nimport { chakra } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { cloneElement, isValidElement } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nfunction ButtonIcon(props) {\n  const { children, className, ...rest } = props;\n  const _children = isValidElement(children) ? cloneElement(children, {\n    \"aria-hidden\": true,\n    focusable: false\n  }) : children;\n  const _className = cx(\"chakra-button__icon\", className);\n  return /* @__PURE__ */ jsx(\n    chakra.span,\n    {\n      display: \"inline-flex\",\n      alignSelf: \"center\",\n      flexShrink: 0,\n      ...rest,\n      className: _className,\n      children: _children\n    }\n  );\n}\nButtonIcon.displayName = \"ButtonIcon\";\n\nexport {\n  ButtonIcon\n};\n","// src/button-spinner.tsx\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport { chakra } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { useMemo } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nfunction ButtonSpinner(props) {\n  const {\n    label,\n    placement,\n    spacing = \"0.5rem\",\n    children = /* @__PURE__ */ jsx(Spinner, { color: \"currentColor\", width: \"1em\", height: \"1em\" }),\n    className,\n    __css,\n    ...rest\n  } = props;\n  const _className = cx(\"chakra-button__spinner\", className);\n  const marginProp = placement === \"start\" ? \"marginEnd\" : \"marginStart\";\n  const spinnerStyles = useMemo(\n    () => ({\n      display: \"flex\",\n      alignItems: \"center\",\n      position: label ? \"relative\" : \"absolute\",\n      [marginProp]: label ? spacing : 0,\n      fontSize: \"1em\",\n      lineHeight: \"normal\",\n      ...__css\n    }),\n    [__css, label, marginProp, spacing]\n  );\n  return /* @__PURE__ */ jsx(chakra.div, { className: _className, ...rest, __css: spinnerStyles, children });\n}\nButtonSpinner.displayName = \"ButtonSpinner\";\n\nexport {\n  ButtonSpinner\n};\n","// src/index.ts\nimport { useMemo } from \"react\";\nfunction assignRef(ref, value) {\n  if (ref == null)\n    return;\n  if (typeof ref === \"function\") {\n    ref(value);\n    return;\n  }\n  try {\n    ref.current = value;\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`);\n  }\n}\nfunction mergeRefs(...refs) {\n  return (node) => {\n    refs.forEach((ref) => {\n      assignRef(ref, node);\n    });\n  };\n}\nfunction useMergeRefs(...refs) {\n  return useMemo(() => mergeRefs(...refs), refs);\n}\nexport {\n  assignRef,\n  mergeRefs,\n  useMergeRefs\n};\n","import {\n  useButtonType\n} from \"./chunk-FRFD4OXU.mjs\";\nimport {\n  useButtonGroup\n} from \"./chunk-DGWZA2DU.mjs\";\nimport {\n  ButtonIcon\n} from \"./chunk-HCASMTTF.mjs\";\nimport {\n  ButtonSpinner\n} from \"./chunk-HNNHG6RU.mjs\";\n\n// src/button.tsx\nimport { useMergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\";\nimport { useMemo } from \"react\";\nimport { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nvar Button = forwardRef((props, ref) => {\n  const group = useButtonGroup();\n  const styles = useStyleConfig(\"Button\", { ...group, ...props });\n  const {\n    isDisabled = group == null ? void 0 : group.isDisabled,\n    isLoading,\n    isActive,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type,\n    spinner,\n    spinnerPlacement = \"start\",\n    className,\n    as,\n    ...rest\n  } = omitThemingProps(props);\n  const buttonStyles = useMemo(() => {\n    const _focus = { ...styles == null ? void 0 : styles[\"_focus\"], zIndex: 1 };\n    return {\n      display: \"inline-flex\",\n      appearance: \"none\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      userSelect: \"none\",\n      position: \"relative\",\n      whiteSpace: \"nowrap\",\n      verticalAlign: \"middle\",\n      outline: \"none\",\n      ...styles,\n      ...!!group && { _focus }\n    };\n  }, [styles, group]);\n  const { ref: _ref, type: defaultType } = useButtonType(as);\n  const contentProps = { rightIcon, leftIcon, iconSpacing, children };\n  return /* @__PURE__ */ jsxs(\n    chakra.button,\n    {\n      ref: useMergeRefs(ref, _ref),\n      as,\n      type: type != null ? type : defaultType,\n      \"data-active\": dataAttr(isActive),\n      \"data-loading\": dataAttr(isLoading),\n      __css: buttonStyles,\n      className: cx(\"chakra-button\", className),\n      ...rest,\n      disabled: isDisabled || isLoading,\n      children: [\n        isLoading && spinnerPlacement === \"start\" && /* @__PURE__ */ jsx(\n          ButtonSpinner,\n          {\n            className: \"chakra-button__spinner--start\",\n            label: loadingText,\n            placement: \"start\",\n            spacing: iconSpacing,\n            children: spinner\n          }\n        ),\n        isLoading ? loadingText || /* @__PURE__ */ jsx(chakra.span, { opacity: 0, children: /* @__PURE__ */ jsx(ButtonContent, { ...contentProps }) }) : /* @__PURE__ */ jsx(ButtonContent, { ...contentProps }),\n        isLoading && spinnerPlacement === \"end\" && /* @__PURE__ */ jsx(\n          ButtonSpinner,\n          {\n            className: \"chakra-button__spinner--end\",\n            label: loadingText,\n            placement: \"end\",\n            spacing: iconSpacing,\n            children: spinner\n          }\n        )\n      ]\n    }\n  );\n});\nButton.displayName = \"Button\";\nfunction ButtonContent(props) {\n  const { leftIcon, rightIcon, children, iconSpacing } = props;\n  return /* @__PURE__ */ jsxs(Fragment, { children: [\n    leftIcon && /* @__PURE__ */ jsx(ButtonIcon, { marginEnd: iconSpacing, children: leftIcon }),\n    children,\n    rightIcon && /* @__PURE__ */ jsx(ButtonIcon, { marginStart: iconSpacing, children: rightIcon })\n  ] });\n}\n\nexport {\n  Button\n};\n","// src/use-button-type.tsx\nimport { useCallback, useState } from \"react\";\nfunction useButtonType(value) {\n  const [isButton, setIsButton] = useState(!value);\n  const refCallback = useCallback((node) => {\n    if (!node)\n      return;\n    setIsButton(node.tagName === \"BUTTON\");\n  }, []);\n  const type = isButton ? \"button\" : void 0;\n  return { ref: refCallback, type };\n}\n\nexport {\n  useButtonType\n};\n","import * as React from \"react\"\nimport { Flex, Button } from \"@chakra-ui/react\";\n\nconst Boton = () =>{\n\n  return(\n      <Flex align=\"center\" justify=\"center\">\n              <Button m={2} >Todos</Button>\n              <Button m={2} >Completas</Button>\n              <Button m={2}>Incompletas</Button>\n      </Flex>  \n      )\n}\n\nexport default Boton;"],"names":["Flex","props","ref","direction","align","justify","wrap","basis","grow","shrink","rest","styles","display","flexDirection","alignItems","justifyContent","flexWrap","flexBasis","flexGrow","flexShrink","jsx","__css","displayName","ButtonGroupProvider","useButtonGroup","strict","name","ButtonIcon","children","className","_children","isValidElement","cloneElement","focusable","_className","cx","alignSelf","ButtonSpinner","label","placement","spacing","color","width","height","marginProp","spinnerStyles","useMemo","position","fontSize","lineHeight","mergeRefs","refs","node","forEach","value","current","error","Error","assignRef","useMergeRefs","Button","group","isDisabled","isLoading","isActive","leftIcon","rightIcon","loadingText","iconSpacing","type","spinner","spinnerPlacement","as","buttonStyles","_focus","zIndex","appearance","userSelect","whiteSpace","verticalAlign","outline","_ref","defaultType","isButton","setIsButton","useState","useCallback","tagName","useButtonType","contentProps","jsxs","disabled","opacity","ButtonContent","Fragment","marginEnd","marginStart","Boton","React","m"],"sourceRoot":""}