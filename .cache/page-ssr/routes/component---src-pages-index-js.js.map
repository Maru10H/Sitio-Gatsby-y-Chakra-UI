{"version":3,"file":"component---src-pages-index-js.js","mappings":"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","sources":["webpack://my-gatsby-site/./node_modules/@chakra-ui/layout/dist/chunk-MPFPK3CX.mjs","webpack://my-gatsby-site/./node_modules/@chakra-ui/button/dist/chunk-FRFD4OXU.mjs","webpack://my-gatsby-site/./node_modules/@chakra-ui/button/dist/chunk-DGWZA2DU.mjs","webpack://my-gatsby-site/./node_modules/@chakra-ui/button/dist/chunk-HCASMTTF.mjs","webpack://my-gatsby-site/./node_modules/@chakra-ui/button/dist/chunk-HNNHG6RU.mjs","webpack://my-gatsby-site/./node_modules/@chakra-ui/react-use-merge-refs/dist/index.mjs","webpack://my-gatsby-site/./node_modules/@chakra-ui/button/dist/chunk-NAA7TEES.mjs","webpack://my-gatsby-site/./src/pages/index.js"],"sourcesContent":["// src/flex.tsx\nimport {\n  chakra,\n  forwardRef\n} from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Flex = forwardRef(function Flex2(props, ref) {\n  const { direction, align, justify, wrap, basis, grow, shrink, ...rest } = props;\n  const styles = {\n    display: \"flex\",\n    flexDirection: direction,\n    alignItems: align,\n    justifyContent: justify,\n    flexWrap: wrap,\n    flexBasis: basis,\n    flexGrow: grow,\n    flexShrink: shrink\n  };\n  return /* @__PURE__ */ jsx(chakra.div, { ref, __css: styles, ...rest });\n});\nFlex.displayName = \"Flex\";\n\nexport {\n  Flex\n};\n","// src/use-button-type.tsx\nimport { useCallback, useState } from \"react\";\nfunction useButtonType(value) {\n  const [isButton, setIsButton] = useState(!value);\n  const refCallback = useCallback((node) => {\n    if (!node)\n      return;\n    setIsButton(node.tagName === \"BUTTON\");\n  }, []);\n  const type = isButton ? \"button\" : void 0;\n  return { ref: refCallback, type };\n}\n\nexport {\n  useButtonType\n};\n","// src/button-context.ts\nimport { createContext } from \"@chakra-ui/react-context\";\nvar [ButtonGroupProvider, useButtonGroup] = createContext({\n  strict: false,\n  name: \"ButtonGroupContext\"\n});\n\nexport {\n  ButtonGroupProvider,\n  useButtonGroup\n};\n","// src/button-icon.tsx\nimport { chakra } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { cloneElement, isValidElement } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nfunction ButtonIcon(props) {\n  const { children, className, ...rest } = props;\n  const _children = isValidElement(children) ? cloneElement(children, {\n    \"aria-hidden\": true,\n    focusable: false\n  }) : children;\n  const _className = cx(\"chakra-button__icon\", className);\n  return /* @__PURE__ */ jsx(\n    chakra.span,\n    {\n      display: \"inline-flex\",\n      alignSelf: \"center\",\n      flexShrink: 0,\n      ...rest,\n      className: _className,\n      children: _children\n    }\n  );\n}\nButtonIcon.displayName = \"ButtonIcon\";\n\nexport {\n  ButtonIcon\n};\n","// src/button-spinner.tsx\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport { chakra } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { useMemo } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nfunction ButtonSpinner(props) {\n  const {\n    label,\n    placement,\n    spacing = \"0.5rem\",\n    children = /* @__PURE__ */ jsx(Spinner, { color: \"currentColor\", width: \"1em\", height: \"1em\" }),\n    className,\n    __css,\n    ...rest\n  } = props;\n  const _className = cx(\"chakra-button__spinner\", className);\n  const marginProp = placement === \"start\" ? \"marginEnd\" : \"marginStart\";\n  const spinnerStyles = useMemo(\n    () => ({\n      display: \"flex\",\n      alignItems: \"center\",\n      position: label ? \"relative\" : \"absolute\",\n      [marginProp]: label ? spacing : 0,\n      fontSize: \"1em\",\n      lineHeight: \"normal\",\n      ...__css\n    }),\n    [__css, label, marginProp, spacing]\n  );\n  return /* @__PURE__ */ jsx(chakra.div, { className: _className, ...rest, __css: spinnerStyles, children });\n}\nButtonSpinner.displayName = \"ButtonSpinner\";\n\nexport {\n  ButtonSpinner\n};\n","// src/index.ts\nimport { useMemo } from \"react\";\nfunction assignRef(ref, value) {\n  if (ref == null)\n    return;\n  if (typeof ref === \"function\") {\n    ref(value);\n    return;\n  }\n  try {\n    ref.current = value;\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`);\n  }\n}\nfunction mergeRefs(...refs) {\n  return (node) => {\n    refs.forEach((ref) => {\n      assignRef(ref, node);\n    });\n  };\n}\nfunction useMergeRefs(...refs) {\n  return useMemo(() => mergeRefs(...refs), refs);\n}\nexport {\n  assignRef,\n  mergeRefs,\n  useMergeRefs\n};\n","import {\n  useButtonType\n} from \"./chunk-FRFD4OXU.mjs\";\nimport {\n  useButtonGroup\n} from \"./chunk-DGWZA2DU.mjs\";\nimport {\n  ButtonIcon\n} from \"./chunk-HCASMTTF.mjs\";\nimport {\n  ButtonSpinner\n} from \"./chunk-HNNHG6RU.mjs\";\n\n// src/button.tsx\nimport { useMergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\";\nimport { useMemo } from \"react\";\nimport { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nvar Button = forwardRef((props, ref) => {\n  const group = useButtonGroup();\n  const styles = useStyleConfig(\"Button\", { ...group, ...props });\n  const {\n    isDisabled = group == null ? void 0 : group.isDisabled,\n    isLoading,\n    isActive,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type,\n    spinner,\n    spinnerPlacement = \"start\",\n    className,\n    as,\n    ...rest\n  } = omitThemingProps(props);\n  const buttonStyles = useMemo(() => {\n    const _focus = { ...styles == null ? void 0 : styles[\"_focus\"], zIndex: 1 };\n    return {\n      display: \"inline-flex\",\n      appearance: \"none\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      userSelect: \"none\",\n      position: \"relative\",\n      whiteSpace: \"nowrap\",\n      verticalAlign: \"middle\",\n      outline: \"none\",\n      ...styles,\n      ...!!group && { _focus }\n    };\n  }, [styles, group]);\n  const { ref: _ref, type: defaultType } = useButtonType(as);\n  const contentProps = { rightIcon, leftIcon, iconSpacing, children };\n  return /* @__PURE__ */ jsxs(\n    chakra.button,\n    {\n      ref: useMergeRefs(ref, _ref),\n      as,\n      type: type != null ? type : defaultType,\n      \"data-active\": dataAttr(isActive),\n      \"data-loading\": dataAttr(isLoading),\n      __css: buttonStyles,\n      className: cx(\"chakra-button\", className),\n      ...rest,\n      disabled: isDisabled || isLoading,\n      children: [\n        isLoading && spinnerPlacement === \"start\" && /* @__PURE__ */ jsx(\n          ButtonSpinner,\n          {\n            className: \"chakra-button__spinner--start\",\n            label: loadingText,\n            placement: \"start\",\n            spacing: iconSpacing,\n            children: spinner\n          }\n        ),\n        isLoading ? loadingText || /* @__PURE__ */ jsx(chakra.span, { opacity: 0, children: /* @__PURE__ */ jsx(ButtonContent, { ...contentProps }) }) : /* @__PURE__ */ jsx(ButtonContent, { ...contentProps }),\n        isLoading && spinnerPlacement === \"end\" && /* @__PURE__ */ jsx(\n          ButtonSpinner,\n          {\n            className: \"chakra-button__spinner--end\",\n            label: loadingText,\n            placement: \"end\",\n            spacing: iconSpacing,\n            children: spinner\n          }\n        )\n      ]\n    }\n  );\n});\nButton.displayName = \"Button\";\nfunction ButtonContent(props) {\n  const { leftIcon, rightIcon, children, iconSpacing } = props;\n  return /* @__PURE__ */ jsxs(Fragment, { children: [\n    leftIcon && /* @__PURE__ */ jsx(ButtonIcon, { marginEnd: iconSpacing, children: leftIcon }),\n    children,\n    rightIcon && /* @__PURE__ */ jsx(ButtonIcon, { marginStart: iconSpacing, children: rightIcon })\n  ] });\n}\n\nexport {\n  Button\n};\n","import * as React from \"react\"\nimport { Flex, Button } from \"@chakra-ui/react\";\n\nconst Boton = () =>{\n\n  return(\n      <Flex align=\"center\" justify=\"center\">\n              <Button m={2} >Todos</Button>\n              <Button m={2} >Completas</Button>\n              <Button m={2}>Incompletas</Button>\n      </Flex>  \n      )\n}\n\nexport default Boton;"],"names":["React","Flex","Button","Boton","createElement","align","justify","m"],"sourceRoot":""}